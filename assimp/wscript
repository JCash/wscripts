#! /usr/bin/env python
# encoding: utf-8

import subprocess


def options(opt):
    pass


def configure(conf):
    conf.find_program('git', var='GIT')


def build(bld):
    def create_revision(task):
        with open(task.inputs[0].abspath(), 'rb') as f:
            data = f.read()
        cwd = task.inputs[0].parent.abspath()
        revision = '00000000'
        branch = 'unknown'
        if 'GIT' in task.env:
            revision = subprocess.check_output(['git', 'log', '-1', '--format=%h'], cwd=cwd)
            branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], cwd=cwd)
        data = data.replace('@GIT_COMMIT_HASH@', revision.strip())
        data = data.replace('@GIT_BRANCH@', branch.strip())
        with open(task.outputs[0].abspath(), 'wb') as f:
            f.write(data)

    bld( features           = 'c cstlib',
         source             = 'contrib/ConvertUTF/ConvertUTF.c',
         includes           = 'contrib',
         export_includes    = 'contrib',
         target             = 'ConvertUTF')
    
    bld( features           = 'cxx cxxstlib',
         source             = 'contrib/clipper/clipper.cpp',
         includes           = 'contrib',
         export_includes    = 'contrib',
         target             = 'clipper')
    
    bld( features           = 'cxx cxxstlib',
         source             = 'contrib/irrXml/irrXml.cpp',
         includes           = 'contrib code/BoostWorkaround',
         export_includes    = 'contrib',
         target             = 'irrXml')
    
    bld( features           = 'cxx cxxstlib',
         source             = bld.path.ant_glob('contrib/poly2tri/**/*.cc'),
         includes           = 'contrib/poly2tri',
         export_includes    = 'contrib/poly2tri',
         target             = 'poly2tri')
        
    bld(rule    = create_revision,
        source  = bld.path.make_node('revision.h.in'),
        target  = bld.path.get_bld().make_node('revision.h'),
        export_includes = [bld.path.get_bld().abspath()],
        name    = 'assimp_revision')

    source = bld.path.ant_glob('code/**/*.cpp')
    b = bld( features           = 'cxx cxxstlib',
             source             = source,
             includes           = 'include code code/BoostWorkaround contrib',
             use                = 'zlib unzip assimp_revision ConvertUTF clipper irrXml poly2tri',
             export_includes    = 'include',
             target             = 'assimp')
    b.env.CXXFLAGS.append('-Wno-deprecated-register')
