#! /usr/bin/env python
# encoding: utf-8

import os, sys, subprocess


def options(opt):
    pass


def configure(conf):
    conf.find_program('git', var='GIT')


def build(bld):
    defines = []
    includes = []
    sourcedirfiles = bld.path.ant_glob('src/**/*.c')
    if sys.platform == 'linux2':
        platformfiles = [x for x in sourcedirfiles if x.name.startswith('x11') or x.name.startswith('xkb') or x.name.startswith('glx') or x.name.startswith('linux')]
        includes += ['/usr/include']
        defines = ['_GLFW_X11', '_GLFW_USE_OPENGL']
        
    elif sys.platform == 'darwin':
        sourcedirfiles += [x for x in os.listdir(sourcedir) if x.endswith('.m')]
        platformfiles = [x for x in sourcedirfiles if x.name.startswith('cocoa') or x.name.startswith('nsgl') or x.name.startswith('iokit') or x.name.startswith('mach')]
        defines = ['_GLFW_COCOA', '_GLFW_USE_OPENGL']
        
    elif sys.platform == 'win32':
        platformfiles = [x for x in sourcedirfiles if x.name.startswith('win32') or x.name.startswith('wgl') or x.name.startswith('winmm')]
        defines = ['_GLFW_WIN32', '_GLFW_USE_OPENGL', '_GLFW_WGL']
    
    glfw = bld.stlib(features  = 'c',
          source    = ['src/context.c', 'src/init.c', 'src/input.c', 'src/monitor.c', 'src/window.c'] + platformfiles,
          includes = ['include'] + includes,
          export_includes = ['include'],
          defines   = defines,
          target    = 'glfw')
    
    if sys.platform in ('linux2', 'darwin'):
        glfw.env.append_unique('CFLAGS', '-Wno-conversion')
        glfw.env.append_unique('CFLAGS', '-Wno-unused-parameter')
        glfw.env.append_unique('CFLAGS', '-Wno-sign-compare')
        glfw.env.append_unique('CFLAGS', '-Wno-deprecated-declarations')
        #conf.env['LIB_X11'] = ['X11', 'Xrandr', 'Xi', 'Xxf86vm']
    elif sys.platform == 'win32':
        glfw.env.append_unique('CFLAGS', '/wd4152')
        glfw.env.append_unique('CFLAGS', '/wd4244')
        glfw.env.append_unique('CFLAGS', '/wd4204')
        glfw.env.append_unique('CFLAGS', '/wd4306')
    if '-std=c++11' in glfw.env.CFLAGS:
        glfw.env.CFLAGS.remove('-std=c++11')

